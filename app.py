
import streamlit as st
import pandas as pd
import fitz  # PyMuPDF
from io import BytesIO
from reportlab.pdfgen import canvas
from reportlab.lib.pagesizes import letter
from reportlab.lib.units import mm
import re

def extract_table_from_pdf(pdf_bytes):
    doc = fitz.open(stream=pdf_bytes, filetype="pdf")
    text = ""
    for page in doc:
        text += page.get_text()
    lines = text.splitlines()

    data = []
    for line in lines:
        if re.search(r'\d+\.\d{2}', line):  # –∏–º–∞ —á–∏—Å–ª–∞ —Å –¥–µ—Å–µ—Ç–∏—á–Ω–∏
            parts = line.split()
            try:
                float(parts[-4].replace(",", "."))
                row = {
                    "–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ": " ".join(parts[:-5]),
                    "–ö–æ–ª.": float(parts[-5].replace(",", ".")),
                    "–¶–µ–Ω–∞ –ø—Ä. —Å –î–î–°": float(parts[-4].replace(",", ".")),
                }
                data.append(row)
            except:
                continue

    return pd.DataFrame(data)

def generate_modified_pdf(df):
    buffer = BytesIO()
    c = canvas.Canvas(buffer, pagesize=letter)
    c.setFont("Helvetica", 10)

    x_start = 20 * mm
    y_start = 270 * mm
    y = y_start

    headers = ["–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ", "–ö–æ–ª.", "–¶–µ–Ω–∞ –ø—Ä. —Å –î–î–°", "–¶–µ–Ω–∞ –≤ –µ–≤—Ä–æ"]
    for i, header in enumerate(headers):
        c.drawString(x_start + i * 40 * mm, y, header)

    y -= 10
    for _, row in df.iterrows():
        c.drawString(x_start + 0 * 40 * mm, y, str(row["–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ"])[:25])
        c.drawString(x_start + 1 * 40 * mm, y, f'{row["–ö–æ–ª."]:.2f}')
        c.drawString(x_start + 2 * 40 * mm, y, f'{row["–¶–µ–Ω–∞ –ø—Ä. —Å –î–î–°"]:.2f}')
        c.drawString(x_start + 3 * 40 * mm, y, f'{row["–¶–µ–Ω–∞ –≤ –µ–≤—Ä–æ"]:.2f}')
        y -= 10
        if y < 50:
            c.showPage()
            y = y_start

    c.save()
    buffer.seek(0)
    return buffer

def run_app():
    st.title("PDF –û–±—Ä–∞–±–æ—Ç—á–∏–∫: –î–æ–±–∞–≤—è–Ω–µ –Ω–∞ –∫–æ–ª–æ–Ω–∞ '–¶–µ–Ω–∞ –≤ –µ–≤—Ä–æ'")
    uploaded_file = st.file_uploader("–ö–∞—á–∏ PDF —Ñ–∞–π–ª", type="pdf")

    if uploaded_file:
        df = extract_table_from_pdf(uploaded_file.read())

        if df.empty:
            st.error("–ù–µ –µ –æ—Ç–∫—Ä–∏—Ç–∞ —Ç–∞–±–ª–∏—Ü–∞ —Å –¥–∞–Ω–Ω–∏.")
            return

        df["–¶–µ–Ω–∞ –≤ –µ–≤—Ä–æ"] = df["–¶–µ–Ω–∞ –ø—Ä. —Å –î–î–°"] / 1.95583
        df["–¶–µ–Ω–∞ –≤ –µ–≤—Ä–æ"] = df["–¶–µ–Ω–∞ –≤ –µ–≤—Ä–æ"].round(2)

        st.write("–û–±—Ä–∞–±–æ—Ç–µ–Ω–∞ —Ç–∞–±–ª–∏—Ü–∞:")
        st.dataframe(df)

        pdf_bytes = generate_modified_pdf(df)
        st.download_button(
            label="üì• –ò–∑—Ç–µ–≥–ª–∏ –Ω–æ–≤–∏—è PDF —Å –∫–æ–ª–æ–Ω–∫–∞ '–¶–µ–Ω–∞ –≤ –µ–≤—Ä–æ'",
            data=pdf_bytes,
            file_name="modified_invoice.pdf",
            mime="application/pdf"
        )

run_app()
