
import streamlit as st
import pandas as pd
import fitz  # PyMuPDF
from io import BytesIO
from reportlab.pdfgen import canvas
from reportlab.lib.pagesizes import letter
from reportlab.lib.units import mm
import re

def extract_lines_with_numbers(pdf_bytes):
    doc = fitz.open(stream=pdf_bytes, filetype="pdf")
    text = ""
    for page in doc:
        text += page.get_text()
    lines = text.splitlines()

    numeric_lines = []
    pattern = re.compile(r"(\d+[\.,]\d{2}\s+){5,}\d+[\.,]\d{2}$")  # —Ç—ä—Ä—Å–∏ —Ä–µ–¥–æ–≤–µ —Å –ø–æ–Ω–µ 6 –¥–µ—Å–µ—Ç–∏—á–Ω–∏ —á–∏—Å–ª–∞
    for line in lines:
        if pattern.search(line):
            numeric_lines.append(line.strip())
    return numeric_lines

def parse_lines_to_dataframe(lines):
    rows = []
    for line in lines:
        parts = line.split()
        numbers = []
        texts = []

        for part in parts[::-1]:
            try:
                numbers.insert(0, float(part.replace(",", ".")))
            except:
                texts.insert(0, part)

        if len(numbers) >= 6:
            rows.append({
                "–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ": " ".join(texts),
                "–ß–∏—Å–ª–∞": numbers
            })
    return pd.DataFrame(rows)

def generate_modified_pdf(df, col_name):
    buffer = BytesIO()
    c = canvas.Canvas(buffer, pagesize=letter)
    c.setFont("Helvetica", 9)

    x_start = 10 * mm
    y_start = 270 * mm
    y = y_start

    headers = df.columns.tolist()
    for i, header in enumerate(headers):
        c.drawString(x_start + i * 40 * mm, y, header)

    y -= 10
    for _, row in df.iterrows():
        for i, col in enumerate(headers):
            value = row[col]
            text = f"{value:.2f}" if isinstance(value, float) else str(value)[:30]
            c.drawString(x_start + i * 40 * mm, y, text)
        y -= 10
        if y < 40:
            c.showPage()
            y = y_start

    c.save()
    buffer.seek(0)
    return buffer

def safe_eval(formula, x):
    try:
        return eval(formula, {"x": x, "__builtins__": {}})
    except:
        return None

def run_app():
    st.title("PDF –û–±—Ä–∞–±–æ—Ç—á–∏–∫: –§–æ—Ä–º—É–ª–∞ –ø–æ –ø–æ–∑–∏—Ü–∏—è –æ—Ç–¥—è—Å–Ω–æ")

    uploaded_file = st.file_uploader("–ö–∞—á–∏ PDF —Ñ–∞–π–ª", type="pdf")

    if uploaded_file:
        lines = extract_lines_with_numbers(uploaded_file.read())
        df = parse_lines_to_dataframe(lines)

        if df.empty:
            st.error("–ù–µ —Å–∞ –æ—Ç–∫—Ä–∏—Ç–∏ —Ä–µ–¥–æ–≤–µ —Å —á–∏—Å–ª–æ–≤–∏ —Å—Ç–æ–π–Ω–æ—Å—Ç–∏.")
            return

        st.write("–ü—Ä–µ–≥–ª–µ–¥ –Ω–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—Ç–µ —Ä–µ–¥–æ–≤–µ:")
        st.dataframe(df[["–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ", "–ß–∏—Å–ª–∞"]])

        max_pos = len(df.iloc[0]["–ß–∏—Å–ª–∞"]) if not df.empty else 6
        pos = st.number_input(f"–ö–æ—è –ø–æ–∑–∏—Ü–∏—è –æ—Ç–¥—è—Å–Ω–æ –¥–∞ –∏–∑–ø–æ–ª–∑–≤–∞–º–µ? (–Ω–∞–ø—Ä. 3 = —Ç—Ä–µ—Ç–æ —á–∏—Å–ª–æ –æ—Ç–¥—è—Å–Ω–æ)", min_value=1, max_value=max_pos, value=3)
        formula = st.text_input("–í—ä–≤–µ–¥–∏ —Ñ–æ—Ä–º—É–ª–∞ (–ø—Ä–∏–º–µ—Ä: x / 1.95583):", value="x / 1.95583")
        new_col_name = st.text_input("–ò–º–µ –Ω–∞ –Ω–æ–≤–∞—Ç–∞ –∫–æ–ª–æ–Ω–∫–∞:", value="–¶–µ–Ω–∞ –≤ –µ–≤—Ä–æ")

        if st.button("–î–æ–±–∞–≤–∏ –∫–æ–ª–æ–Ω–∞—Ç–∞"):
            try:
                df[new_col_name] = df["–ß–∏—Å–ª–∞"].apply(lambda lst: round(safe_eval(formula, lst[-pos]), 2) if len(lst) >= pos else "")
                df_final = df[["–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ", new_col_name]]
                st.success(f"–ö–æ–ª–æ–Ω–∞—Ç–∞ '{new_col_name}' –µ –¥–æ–±–∞–≤–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
                st.dataframe(df_final)

                pdf_bytes = generate_modified_pdf(df_final, new_col_name)
                st.download_button(
                    label="üì• –ò–∑—Ç–µ–≥–ª–∏ –Ω–æ–≤–∏—è PDF",
                    data=pdf_bytes,
                    file_name="modified_invoice.pdf",
                    mime="application/pdf"
                )
            except:
                st.error("–§–æ—Ä–º—É–ª–∞—Ç–∞ –Ω–µ –º–æ–∂–∞ –¥–∞ –±—ä–¥–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∞. –ü—Ä–æ–≤–µ—Ä–∏ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞.")

run_app()
