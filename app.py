
import streamlit as st
import pandas as pd
import fitz  # PyMuPDF
from io import BytesIO
from reportlab.pdfgen import canvas
from reportlab.lib.pagesizes import letter
from reportlab.lib.units import mm
import re

def extract_table_from_pdf(pdf_bytes):
    doc = fitz.open(stream=pdf_bytes, filetype="pdf")
    text = ""
    for page in doc:
        text += page.get_text()

    lines = text.splitlines()
    data = []

    pattern = re.compile(
        r"^(?P<name>.+?)\s+(?P<qty>\d+[\.,]?\d*)\s+(?P<price1>\d+[\.,]?\d*)\s+(?P<price2>\d+[\.,]?\d*)\s+(?P<avg>\d+[\.,]?\d*)\s+(?P<markup>\d+[\.,]?\d*)\s+(?P<total>\d+[\.,]?\d*)$"
    )

    for line in lines:
        match = pattern.match(line.strip())
        if match:
            try:
                data.append({
                    "–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ": match.group("name"),
                    "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ": float(match.group("qty").replace(",", ".")),
                    "–¶–µ–Ω–∞ –ø—Ä. —Å –î–î–°": float(match.group("price1").replace(",", ".")),
                    "–¶–µ–Ω–∞ –ø—Ä. –±–µ–∑": float(match.group("price2").replace(",", ".")),
                    "–°—Ä. —Ü–µ–Ω–∞": float(match.group("avg").replace(",", ".")),
                    "–ù–∞–¥—Ü–µ–Ω–∫–∞": float(match.group("markup").replace(",", ".")),
                    "–°—Ç–æ–π–Ω–æ—Å—Ç": float(match.group("total").replace(",", "."))
                })
            except:
                continue

    return pd.DataFrame(data)

def generate_modified_pdf(df):
    buffer = BytesIO()
    c = canvas.Canvas(buffer, pagesize=letter)
    c.setFont("Helvetica", 9)

    x_start = 10 * mm
    y_start = 270 * mm
    y = y_start

    headers = df.columns.tolist()
    for i, header in enumerate(headers):
        c.drawString(x_start + i * 30 * mm, y, header)

    y -= 10
    for _, row in df.iterrows():
        for i, col in enumerate(headers):
            value = row[col]
            text = f"{value:.2f}" if isinstance(value, float) else str(value)[:20]
            c.drawString(x_start + i * 30 * mm, y, text)
        y -= 10
        if y < 40:
            c.showPage()
            y = y_start

    c.save()
    buffer.seek(0)
    return buffer

def safe_eval(formula, x):
    try:
        return eval(formula, {"x": x, "__builtins__": {}})
    except:
        return None

def run_app():
    st.title("PDF –û–±—Ä–∞–±–æ—Ç—á–∏–∫: –§–æ—Ä–º—É–ª–∞ –ø–æ –∏–∑–±–æ—Ä –≤—ä—Ä—Ö—É –∏–∑–±—Ä–∞–Ω–∞ –∫–æ–ª–æ–Ω–∞")

    uploaded_file = st.file_uploader("–ö–∞—á–∏ PDF —Ñ–∞–π–ª", type="pdf")

    if uploaded_file:
        df = extract_table_from_pdf(uploaded_file.read())

        if df.empty:
            st.error("–ù–µ –µ –æ—Ç–∫—Ä–∏—Ç–∞ —Ç–∞–±–ª–∏—Ü–∞ —Å –¥–∞–Ω–Ω–∏.")
            return

        st.write("–†–∞–∑–ø–æ–∑–Ω–∞—Ç–∏ –∫–æ–ª–æ–Ω–∏:")
        st.dataframe(df.head())

        selected_column = st.selectbox("–ò–∑–±–µ—Ä–∏ –∫–æ–ª–æ–Ω–∞ –∑–∞ –∏–∑—á–∏—Å–ª–µ–Ω–∏–µ:", df.columns)
        formula = st.text_input("–í—ä–≤–µ–¥–∏ —Ñ–æ—Ä–º—É–ª–∞ (–ø—Ä–∏–º–µ—Ä: x / 1.95583):", value="x / 1.95583")
        new_col_name = st.text_input("–ò–º–µ –Ω–∞ –Ω–æ–≤–∞—Ç–∞ –∫–æ–ª–æ–Ω–∫–∞:", value="–¶–µ–Ω–∞ –≤ –µ–≤—Ä–æ")

        if st.button("–î–æ–±–∞–≤–∏ –∫–æ–ª–æ–Ω–∞—Ç–∞"):
            try:
                df[new_col_name] = df[selected_column].apply(lambda x: round(safe_eval(formula, x), 2) if pd.notnull(x) else "")
                st.success(f"–ö–æ–ª–æ–Ω–∞—Ç–∞ '{new_col_name}' –µ –¥–æ–±–∞–≤–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
                st.dataframe(df)

                pdf_bytes = generate_modified_pdf(df)
                st.download_button(
                    label="üì• –ò–∑—Ç–µ–≥–ª–∏ –Ω–æ–≤–∏—è PDF",
                    data=pdf_bytes,
                    file_name="modified_invoice.pdf",
                    mime="application/pdf"
                )
            except:
                st.error("–§–æ—Ä–º—É–ª–∞—Ç–∞ –Ω–µ –º–æ–∂–∞ –¥–∞ –±—ä–¥–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∞. –ü—Ä–æ–≤–µ—Ä–∏ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞.")

run_app()
